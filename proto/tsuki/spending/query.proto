syntax = "proto3";
package tsuki.spending;

import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "tsuki/spending/pool.proto";
import "tsuki/gov/proposal.proto";

option go_package = "github.com/TsukiCore/tsuki/x/spending/types";

// Query defines the gRPC querier service
service Query {
  // query-pools - query list of pool names
  rpc QueryPoolNames(QueryPoolNamesRequest) returns (QueryPoolNamesResponse) {
    option (google.api.http).get = "/tsuki/spending/pool_names";
  }
  // query-pool - query pool by name
  rpc QueryPoolByName(QueryPoolByNameRequest) returns (QueryPoolByNameResponse) {
    option (google.api.http).get = "/tsuki/spending/pool/{name}";
  }
  // query-pool-proposals - query pool proposals by name
  rpc QueryPoolProposals(QueryPoolProposalsRequest) returns (QueryPoolProposalsResponse) {
    option (google.api.http).get = "/tsuki/spending/pool_proposals/{pool_name}";
  }
  // query-pools-by-account - query list of pool names where specific tsuki account can register its claim or otherwise claim tokens from
  rpc QueryPoolsByAccount(QueryPoolsByAccountRequest) returns (QueryPoolsByAccountResponse) {
    option (google.api.http).get = "/tsuki/spending/pools/{account}";
  }
}

message QueryPoolNamesRequest {}

message QueryPoolNamesResponse {
  repeated string names = 1;
}

message QueryPoolByNameRequest {
  string name = 1;
}

message QueryPoolByNameResponse {
  SpendingPool pool = 1;
}

message QueryPoolProposalsRequest {
  string pool_name = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types/query.PageRequest"];
}

message QueryPoolProposalsResponse {
  repeated tsuki.gov.Proposal proposals = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types/query.PageResponse"];
}

message QueryPoolsByAccountRequest {
  string account = 1;
}

message QueryPoolsByAccountResponse {
  repeated SpendingPool pool = 1 [
    (gogoproto.nullable) = false
  ];
}